package main

import (
	"context"
	"github.com/stawwkom/auth_service/internal/logger"
	"go.uber.org/zap"
	"os"
	"os/signal"
	"syscall"

	"github.com/stawwkom/auth_service/internal/app"
)

func main() {
	// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
	err := logger.InitLogger("logs/app.log", true) // true ‚Äî –¥–ª—è dev (—á–∏—Ç–∞–µ–º—ã–π), false ‚Äî prod (json)
	if err != nil {
		panic(err)
	}

	logger.Info("üöÄ –°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	a, err := app.NewApp(ctx)
	if err != nil {
		logger.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", zap.Error(err))
	}
	defer a.Close()

	// 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	go func() {
		c := make(chan os.Signal, 1)
		signal.Notify(c, syscall.SIGINT, syscall.SIGTERM)
		<-c
		logger.Warn("‚õîÔ∏è –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω")
		cancel()
	}()

	// 5. –ó–∞–ø—É—Å–∫
	if err := a.Run(ctx); err != nil {
		logger.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞", zap.Error(err))
	}

}
