{
  "swagger": "2.0",
  "info": {
    "title": "auth.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "UserAPI"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/auth/v1": {
      "delete": {
        "operationId": "UserAPI_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID \u003e 0",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "UserAPI"
        ]
      },
      "patch": {
        "operationId": "UserAPI_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authUpdateUserRequest"
            }
          }
        ],
        "tags": [
          "UserAPI"
        ]
      }
    },
    "/auth/v1/create": {
      "post": {
        "operationId": "UserAPI_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authCreateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/authCreateUserRequest"
            }
          }
        ],
        "tags": [
          "UserAPI"
        ]
      }
    },
    "/auth/v1/{id}": {
      "get": {
        "operationId": "UserAPI_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/authGetUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID должен быть \u003e 0",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "UserAPI"
        ]
      }
    }
  },
  "definitions": {
    "authCreateUserRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Имя должно быть от 2 до 50 символов"
        },
        "email": {
          "type": "string",
          "title": "Email должен быть корректного формата"
        },
        "password": {
          "type": "string",
          "title": "Пароль не короче 6 символов"
        },
        "passwordConfirm": {
          "type": "string",
          "title": "Подтверждение пароля — такое же правило"
        },
        "role": {
          "$ref": "#/definitions/authRole",
          "title": "Enum должен быть строго из списка (USER или ADMIN)"
        }
      },
      "title": "Создание пользователя с валидацией"
    },
    "authCreateUserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Ответ с ID после создания"
    },
    "authGetUserResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/authRole"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Ответ с полной информацией о пользователе"
    },
    "authRole": {
      "type": "string",
      "enum": [
        "USER",
        "ADMIN"
      ],
      "default": "USER",
      "title": "Роли пользователя"
    },
    "authUpdateUserRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "ID \u003e 0"
        },
        "name": {
          "type": "string",
          "title": "Имя: если указано, не менее 2 символов"
        },
        "email": {
          "type": "string",
          "title": "Email: если указано, должен быть валидный email"
        }
      },
      "title": "Обновление пользователя"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
